pthreads  
  posix thread  
    -multithread 
posix --portable operating system interface 
pthread_t // data type for thread  
int pthread_create(pthread_t *a,const pthread_attr_t *attr,void*(*start_routine)(void *),void *arg)); // third arr is function or routine of thread
  this function is analoagous to fork in unix  
join -- int pthread_join(pthread_t thread ,void **status)
  
// pthread attribute 
   pthread_attr_(set/get){attribute}
    stack size 
    inhertiance  ,joinable, scheduling policy,priority,system process  
   //defines the features of new thread 
  //has default behaviour with null in pthread_create
    //detachable pthread
      in birell threads there is no mechanism for detaching a thread from its parent  if a parent executes early then child turn to zombies they will never be 
  exited out but in pthreads a thread once detached from its parent is a separate thread and cannot be joined back  
   // parent thread now only have some info of thread they create  
      //detach operation  
        int pthread_detach(); 
      //deattached thread through attributes 
        pthread_attr_setdetachstate(attr,Pthread_create_detached);
    now parent thread does not need to wait for child to exit 

  // when we compile pthread we have to link file to pthread lib command is 
    gcc -o main main.c -lpthread 
    // program ex in file
      
   pthread mutexes  
   //pthread_mutex_t amutex;  // mutex type 
    and we have a explicit lock and unlock procedure; 
    //lock function 
pthread_mutex_lock(pthread_mutex_t *mutex); 
    //unlock function  
     pthread_mutex_unlock(pthread_mutex_t *mutex);  
   
    other mutex operation 
  // int pthread_mutex_init(pthread_mutex_t *mutex,const pthread_mutexattr * attr);
      we can set oen or more attrbutes for the mutex  
       mutex can be shared with other processes and by modifying tis atttirbutes
    // int pthread_mutex_trylock(pthread_mutex_t *mutex); 
        thread will be blocked if we directly go to lock a mutex and it is used by another  thread  but try lock will not result in thread blocking and if it is free locked will be accquired and it return true
       // int pthread_mutex_destroy(pthread_mutex_t *mutex) 
       // destory the mutex variable 
   //remember these points 
    shared data should always be accessed through a single mutex  
    mutex scope must be visible to all  
    globally order lock 
    always unlock
  //condtion variable  
    
    // pthread_cond_t acond;  
       
    //  int pthread_cond_wait(condtion variable,mutex); same as birell wait
     
    //  int pthread_cond_signal(condtion variable,mutex); same as birell signal

     //  int pthread_cond_broadcast(condtion variable,mutex); same as birell broadcast	`	`
     
      // other operation 
           init and destroy same mutexes
      //in confusion use broadcast but it will lower the perfromance of the thread 
       
   
